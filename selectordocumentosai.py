# -*- coding: utf-8 -*-
"""SelectorDocumentosAI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1957qEJ9DgDlXIGesoAH2R94hJLYJ84PZ
"""

!sudo apt install tesseract-ocr
!pip install pytesseract
!apt-get install poppler-utils
!sudo apt install pdf2image
!pip install pdf2image
# from google.colab import drive
# drive.mount('/content/drive')


from matplotlib import pyplot as plt
import matplotlib.ticker as plticker

import cv2
import matplotlib.image as mpimg 
import matplotlib as mpl
from google.colab.patches import cv2_imshow
from PIL import Image
import requests
import shutil
from sklearn import linear_model
import ipywidgets as widgets 
from matplotlib.colors import ListedColormap

import tensorflow as tf

from tensorflow.keras.models import load_model

import numpy as np 

import os

import matplotlib.pyplot as plt

import os
import codecs
import re


import pdf2image
# import datefinder
try:
    from PIL import Image
except ImportError:
    import Image
import pytesseract

tipodeDocumentos = ['CARTA DE ADJUDICACION','CONTRATOS','COTIZACION','FACTURAS','NOTA DE ENTREGA','ORDEN DE COMPRA']

class fecha:
    def __init__(self,dia,mes,anio):
      self.dia = dia
      self.mes = mes
      self.anio = anio

model = tf.keras.models.load_model('/content/drive/MyDrive/modelos')
# newmodel.summary()

def d_file(url, filename):
  # Thanks to https://towardsdatascience.com/how-to-download-an-image-using-python-38a75cfa21c
  r = requests.get(url, stream = True)
  # Check if the image was retrieved successfully
  if r.status_code == 200:
      # Set decode_content value to True, otherwise the downloaded image file's size will be zero.
      r.raw.decode_content = True      
      # Open a local file with wb ( write binary ) permission.
      with open(filename,'wb') as f:
          shutil.copyfileobj(r.raw, f)          
      print('Image sucessfully Downloaded: ',filename)
  else:
      print('Image Couldn\'t be retreived')


def remove_ticks(p):
  p.xticks([])
  p.yticks([])

def show_image(img, cmap='none', title='none'):
  '''
  Displays a frame with the image using matplotlib function and cmap 
  specification for the color map selection. title parameter includes the
  figure title.  
  '''
  mpl.rcParams['figure.dpi']= 300
  if cmap=='none':      
    plt.imshow(img)
  else:
    plt.imshow(img, cmap = cmap)
  remove_ticks(plt)
  plt.tight_layout()
  if title!='none':
    plt.title(title)
  plt.show()

def show_hist(img, title='none', bins=100):
  '''
  This function assumes that the img parameter corresponds to a single-channel
  image, i.e. gray image.
  '''
  plt.hist(img.ravel(), bins = bins)
  if title!='none':
    plt.title(title)
  plt.show()

def HE(img, verbose = False):
  if verbose:
    h, bins, patches = plt.hist(img.ravel(), bins = 255)
  else:
    h, bins = np.histogram(img.ravel(), bins = 255)

  # Normalizing towards a sum of 255.0 
  h = h/h.sum()*255
  # Creating a zero array to store the cumulative integral. 
  H = np.zeros(256)
  for i in range(256):
    # for each element of the integral we 
    sum = 0
    for j in range(i):
        sum = sum + h[j]
    H[i] = sum
  m, n = img.shape
  contrasted = np.zeros([m,n])
  for i in range(m):
    for j in range(n):
      contrasted[i,j] = H[int(img[i,j])]
  return contrasted

def rgb2gray(img):  
  I = 0.2126*img[:,:,0] + 0.7152*img[:,:,1] + 0.0722*img[:,:,2]
  return I


def plot_graphs(history, metric):
  plt.plot(history.history[metric])
  plt.plot(history.history['val_'+metric], '')
  plt.xlabel("Epochs")
  plt.ylabel(metric)
  plt.legend([metric, 'val_'+metric])

def ObtenerFecha (date):
  dates = re.search('([1-9]|1[0-9]|2[0-9]|3[0-1]|0[0-9])("\D",.|-|\/|de|del| de |DE| DE |DEL| DEL | del | / | - | )([1-9]|1[0-2]|0[0-9]|[E|e]nero|ENER[0|O]|[F|f]ebrero|FEBRER[0|O]|[M|m]arzo|MARZ[0|O]|[A|a]bril|ABR[1|I]L|[M|m]ayo|MAY[0|O]|[J|j]unio|JUNI[0|O]|[J|j]ulio|JULI[0|O]|[A|a]gosto|AGOST[0|O]|[S|s]eptiembre|SEPTIEMBRE|[0|O|o]ctubre|[0|O]CTUBRE|[N|n]oviembre|N[0|O]VIEMBRE|[D|d]iciembre|D[1|I]C[1|I]EMBRE|[E|e][N|n][E|e]|[F|f][E|e][B|b]|[M|m][A|a][R|r]|[A|a][B|b][R|r]|[M|m][A|a][Y|y]|[J|j][U|u][N|n]|[J|j][U|u][L|l]|[A|a][G|g][O|o]|[S|s]ep|[S|s][E|e][P|p]|[S|s][e|E][p|P]|[S|s][E|e][P|p][T|t]|[O|o|0][C|c][T|t]|[N|n][O|o|0][V|v]|[D|d][I|i|1][C|c])("\D",.|-|\/|de|del| de | del |DE| DE |DEL| DEL | / | - | )(20[0-9][0-9]|[0-2][0-9])',date,re.M)
  if dates:
      print ("FECHA 3 ")   
      print (dates)
      print(dates.groups())
      print(dates.group(2))
      print(dates.pos)
      print ("----------------------------")   
  dato = re.search('([1-9]|1[0-2]|0[0-9]|[E|e]nero|ENER[0|O]|[F|f]ebrero|FEBRER[0|O]|[M|m]arzo|MARZ[0|O]|[A|a]bril|ABR[1|I]L|[M|m]ayo|MAY[0|O]|[J|j]unio|JUNI[0|O]|[J|j]ulio|JULI[0|O]|[A|a]gosto|AGOST[0|O]|[S|s]eptiembre|SEPTIEMBRE|[0|O|o]ctubre|[0|O]CTUBRE|[N|n]oviembre|N[0|O]VIEMBRE|[D|d]iciembre|D[1|I]C[1|I]EMBRE|[E|e][N|n][E|e]|[F|f][E|e][B|b]|[M|m][A|a][R|r]|[A|a][B|b][R|r]|[M|m][A|a][Y|y]|[J|j][U|u][N|n]|[J|j][U|u][L|l]|[A|a][G|g][O|o]|[S|s]ep|[S|s][E|e][P|p]|[S|s][e|E][p|P]|[S|s][E|e][P|p][T|t]|[O|o|0][C|c][T|t]|[N|n][O|o|0][V|v]|[D|d][I|i|1][C|c])("\D",.|-|\/| de |de| del |del|DE| DE |DEL| DEL | . | - | )(20[0-9][0-9]|[0-2][0-9])',date,re.M)
  
  if not dato and not dates: 
    print("return false por no es dato ni date ")
    return False
  print ("FECHA 2 ")   
  print(dato)
  print(dato.groups())
  print(dato.end(0))
  print(dato.pos)
  print ("----------------------")   

  if not dates:
      print("no hay fecha ")
      dates = dato

  Empieza1=dates.start(0)
  Empieza2=dato.start(0)
  termina1=dates.end(0)
  termina2=dato.end(0)


  Formto_mes_anio=False

  if termina2== termina1:
    print("terminan iguales entonces compruebo que no empiezen iguales")
    if Empieza1 != Empieza2:
      Formto_mes_anio=True
      
    else:
      print("el otro loco ")
      return False
      
  if termina1 < termina2:
    print("Termina 1 es menor a termina 2 ")
    Formto_mes_anio=False
    
  else:
    if Empieza1==Empieza2:
      Formto_mes_anio=False
      
    else:
      if Empieza1<Empieza2:
        Formto_mes_anio=False
        
      else:
        Formto_mes_anio=True
  basemeses={
      1:["ene","ENE","ENERO","enero","Enero","1","01",1],
      2:["feb","FEB","FEBRERO","febrero","Febrero","2","02",2],
      3:["mar","MAR","MARZO","marzo","Marzo","3","03",3],
      4:["abr","ABR","ABRIL","abril","Abril","4","04",4],
      5:["may","MAY","MAYO","mayo","Mayo","5","05",5],
      6:["jun","JUN","JUNIO","junio","Junio","6","06",6],
      7:["jul","JUL","JULIO","julio","Julio","7","07",7],
      8:["ago","AGO","AGOSTO","agosto","Agosto","8","08",8],
      9:["sep","SEP","SEPTIEMBRE","septiembre","Septiembre","9","09",9],
      10:["oct","OCT","OCTUBRE","octubre","Octubre","10",10],
      11:["nov","NOV","NOVIEMBRE","noviembre","Noviembre","11",11],
      12:["dic","DIC","DICIEMBRE","diciembre","Diciembre","12",12],
  }

  if dates == dato:
      Formto_mes_anio = True

  RENAME=""
  if Formto_mes_anio:
    datareal=dato
    # print("la data real es ",datareal.groups())
    # print("ES MES ANIO")
    dia=""
    for k,v in basemeses.items():
      if datareal.group(1) in v:
        # print ("es mes :",k)
        mes=k
        break
      else:
        pass
    else:
      print("erro")
      mes=False
    anio=datareal.group(3)
    # print ("longitudde anio :",len(anio))
  else:
    datareal=dates
    # print("la data real es ",datareal.groups())
    # print("NO ES MES ANIO")
    dia=datareal.group(1)
    for k,v in basemeses.items():
      if datareal.group(3) in v:
        # print ("es mes :",k)
        mes=k
        break
      else:
        pass
    else:
      print("erro")
      mes=False
    anio=datareal.group(5)

    


  if mes:
    if len(anio) == 2:
      anio="20"+anio
    if Formto_mes_anio:
      RENAME=str(mes)+"_"+anio
    else:
      RENAME=dia+"_"+str(mes)+"_"+anio

  return fecha(dia,mes,anio)

class documento:
  def __init__(self,tipo,fecha,empresa,contenido,texto):
    self.tipo = tipo
    self.fecha = fecha
    self.empresa = empresa
    self.contenido = [contenido]
    self.texto=texto
  def MostrarTexto(self):
    print(self.texto)

  def asignarTipo(self,palC):
    self.tipo = palC
  
  def asignarfecha(self,fe):
    self.fecha = fe
    
  def asignarEmpresa(self,emp):
    self.empresa = emp

  def aumentarHoja(self,p,texto):
    print("hola loco")
    self.contenido.append(p)
    sep="------------------------------------------------------------------------------------------------------------------------"
    self.texto=self.texto +"\n"+"CAMBIO DE PAGINA"+" \n "+sep +"\n"+"\n"+texto 
    #agregar una pagina del pdf en formato imagen al array de imagenes contenido
    
  def exportarDocumento(self):
    #convertir array de imagenes a PDF con el nombre empresa_palabraClave_fecha
    if self.fecha:
      name = self.empresa + "_" + tipodeDocumentos[self.tipo] + "_" + self.fecha + ".pdf"
    else:
      name = self.empresa + "_" + tipodeDocumentos[self.tipo] + "_" + "Sin_Fecha"+".pdf"
    

    print ("exportando")

    # print (DOCUMENTOS[0].contenido)
   
    contenido2=[]
    for i in range (len(self.contenido)-1):
      contenido2.append(self.contenido[i+1])
    self.contenido[0].save(name, "PDF" ,resolution=100.0, save_all=True, append_images=contenido2)


    #print(name)
    return name
  
  def extraer(self):
    print(self.tipo)
    print(self.contenido)
    print(self.empresa)

  # def mostrarAnio(self):
  #   print(self.anio)

  # def asignarTipo(self,palC):
  #   self.tipo = palC

from google.colab import files


print("Subir solo PDFS")
name2 = input("Nombre de empresa: ")
uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import os
src = os.listdir()[2]   #find out the file name which u want to rename using indexing
dst =name2+'.pdf'        #change it to the destination name
#os.rename(src, dst)     #rename it
#os.listdir()[1]

DOCUMENTOS=[]

def pdf_to_img(pdf_file):
    return pdf2image.convert_from_path(pdf_file)

def ocr_core(file):
    global DOCUMENTOS
    global name2
    text = pytesseract.image_to_string(file)
    if len(text) > 15:
      # print("imprimiendo PAGINA ",text)
      fecha=ObtenerFecha(text)
      predictions2 = model.predict(np.array([text]))
      print("prediccion:",predictions2)
      tipoDoc = 0
      aux = predictions2[0,0]

      for i in range(len(predictions2[0])):
        if predictions2[0,i] > aux:
          tipoDoc = i
          aux = predictions2[0,i]

      print("Tipo de documento: ", tipoDoc, "FECHA:", fecha)

      if not DOCUMENTOS:
          DOCUMENTOS.append(documento(tipoDoc,fecha,name2,file,text))
      else:
        if DOCUMENTOS[len(DOCUMENTOS)-1].tipo == tipoDoc:
          if tipoDoc != 0 or fecha == "False":
            n=len(DOCUMENTOS)
            DOCUMENTOS[n-1].aumentarHoja(file,text)
            print("doc agregado")
          else:
            # if not res2:
            DOCUMENTOS.append(documento(tipoDoc,fecha,name2 ,file,text))
            print("doc nuevo")
        else:
          # if not res2:
          DOCUMENTOS.append(documento(tipoDoc,fecha,name2 ,file,text))
          print("doc nuevo")


def print_pages(pdf_file):
    images = pdf_to_img(pdf_file)
    print ("debug",images ,"y el enuerate es ", enumerate(images))
    for pg, img in enumerate(images):
        print( "pg" ,pg)
        print(ocr_core(img))

PDFNAME=name2+'.pdf'
print(PDFNAME)
cwd = os.getcwd()
print(cwd)
asd = os.path.dirname("/content/" + PDFNAME)
print("xd", asd)


print_pages("junto.pdf")

print(len(DOCUMENTOS))
print(DOCUMENTOS[0].tipo , "y la fecha es ",DOCUMENTOS[0].fecha)
"""ayuda al momento de separar :V  fecha y titulo"""

DOCUMENTOS[1].tipo

for i in DOCUMENTOS:
  print("El documento es: " ,tipodeDocumentos[i.tipo] , "hay " ,len(i.contenido), "imagenes" , " y po ultimo la fecha es " ,i.fecha )
  #i.exportarDocumento()

# from google.colab import drive
# drive.mount('/content/gdrive')

from tensorflow import keras

from tensorflow.keras.models import load_model
import tensorflow as tf

newmodel = tf.keras.models.load_model('/content/drive/MyDrive/modelos')
newmodel.summary()

import numpy as np

texts="""  
Pil Andina S.A. Num. Pedido / Fecha Pag.
NIT: 1020757027 4425260218 / 16.10.2017 2

 

Pos Material Descripcién
Cantidad Unidad de medida Costo Unitario Importe

 

Notas:
1. Nota de entrega + Certificado de Calidad/Andlisis + Copia del Pedido de Compra (En Almacén Central Recepcion Pil Andina S.A. de cada p
2. Factura + Copia del Pedido de Compra (Entregar en COP-Contabilidad Pil Andina S.A. de cada Planta).

- COCHABAMBA: Wilfredo Soliz - Leonardo Anzaldo.

- LA PAZ: Trifon Ordofiez - Lizett Escobar.

- SANTA CRUZ: Roxana Arana - Ana Romero.
3. Los materiales podran ser entregados en Almacén Central Recepcidn Pil Andina S.A. de cada planta en el horario de 08:00 a 16:00 de lunes
viernes y de 08:00 a 12:00 los sabados.
4, Factura a entregar junto con la mercaderia sera aceptada en COP-Contabilidad Pil Andina S.A. en el horario de 08:00 a 16:00 de lunes a vie
(mismo horario de recepcién de Almacenes).
5. Factura a entregar posterior a la recepcidn de la mercaderia sera aceptada en COP-Contabilidad Pil Andina S.A. solamente los dias viernes
horario de 08:00 a 12:00.
"""
predictions = newmodel.predict(np.array([texts]))


print (predictions)